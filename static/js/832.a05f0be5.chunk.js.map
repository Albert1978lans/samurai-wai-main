{"version":3,"file":"static/js/832.a05f0be5.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo.module.css?2acc","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileDataForm.module.css?5c5c","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormsControls/FormsControls.tsx","hok/withAuthRedirect.tsx","utils/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ProfileInfo_content__bcDRP\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ProfileInfo_content__tndGp\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__d3Qu4\",\"img\":\"ProfileInfo_img__jvaBP\",\"contact\":\"ProfileInfo_contact__UAM3L\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    const [editeMode, setEditeMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditeMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditeMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {!editeMode &&\r\n                    <div>\r\n                        <b>Status: </b>\r\n                        <span onDoubleClick={activateEditMode}>{props.status || '--hooks--'}</span>\r\n                    </div>\r\n\r\n                    }\r\n            </div>\r\n            <div>\r\n                {editeMode &&\r\n                    <input\r\n                        autoFocus\r\n                        onBlur={deactivateEditMode}\r\n                        value={status}\r\n                        onChange={onChangeInput}\r\n                    />}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks","// extracted by mini-css-extract-plugin\nexport default {\"field\":\"ProfileDataForm_field__IuifA\",\"contact\":\"ProfileDataForm_contact__FL7-W\"};","import React from \"react\";\r\nimport {Contact} from \"./ProfileInfo\";\r\nimport {createField, Input} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from './ProfileDataForm.module.css'\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\n\r\ntype ProfileDataFormProps = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, ProfileDataFormProps> & ProfileDataFormProps>  = (props ) => {\r\n    const { pristine, submitting, reset, handleSubmit, initialValues, profile } = props\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <button type={'submit'}>save</button>\r\n            <div className={s.field}>\r\n                <b>Full name:  </b> {createField('Full name', 'fullName', [], Input)}\r\n            </div>\r\n            <div className={s.field}>\r\n                <b>Looking for a job:  </b>\r\n                {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n            </div>\r\n            <div className={s.field}>\r\n                <b>My professional skills: </b>\r\n                {createField('My professional skills', 'lookingForAJobDescription', [], Input)}\r\n            </div>\r\n            <div className={s.field}>\r\n                <b>About me:</b>\r\n                {createField('About me', 'aboutMe', [], Input)}\r\n            </div>\r\n            <div>\r\n\r\n                <b>Contacts</b>:\r\n                {(Object.keys(profile.contacts) as Array<keyof typeof profile.contacts>).map(key => {\r\n                    return <div key={key} className={s.contact}>\r\n                        <b>{key}: {createField(key, 'contacts.' + key, [], Input, {type: 'text'})}</b>\r\n                    </div>\r\n            })}\r\n\r\n\r\n                {props.error && <div className={s.formSummaryError}>{props.error}</div>}\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileType, ProfileDataFormProps>({\r\n    form: 'editProfile'\r\n})(ProfileDataForm)\r\n\r\nexport default ProfileDataReduxForm\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/User.png\";\r\nimport ProfileDataReduxForm from \"./ProfileDataForm\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype ProfileInfoType = {\r\n    owner: boolean\r\n    profile: ProfileType | undefined | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhotos: (photoFile: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<string>\r\n}\r\n\r\nexport type formDataProfileType = {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, owner, savePhotos, saveProfile}: ProfileInfoType) => {\r\n    const [editeMode, setEditeMode] = useState(false)\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhotos(e.target.files[0])\r\n\r\n        }\r\n    }\r\n\r\n    const goToEditeMode = () => {\r\n        setEditeMode(true)\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData)\r\n            .then(() => setEditeMode(false))\r\n    }\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.img}>\r\n                    <img alt={'userPhoto'} src={profile.photos.large || userPhoto}/>\r\n                </div>\r\n                <div>\r\n                    {owner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n                </div>\r\n\r\n                { editeMode\r\n                    ? <ProfileDataReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} owner={owner} goToEditeMode={goToEditeMode}/> }\r\n\r\n\r\n                <ProfileStatusWithHooks\r\n                    status={status}\r\n                    updateStatus={updateStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string | null\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    owner: boolean\r\n    goToEditeMode: () => void\r\n}\r\n\r\nconst ProfileData = ({profile, owner, goToEditeMode}: ProfileDataPropsType) => {\r\n    return (\r\n        <div>\r\n            {owner && <div><button onClick={goToEditeMode}>edit</button></div>}\r\n            <div>\r\n                <b>Full name</b>: {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            <div>\r\n                <b>By professional skills</b>: {profile.lookingForAJobDescription}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {(Object.keys(profile.contacts) as Array<keyof typeof profile.contacts>).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n\r\n)\r\n\r\n}\r\n\r\n\r\n\r\nexport const Contact = ({contactTitle, contactValue}: ContactPropsType) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo","// extracted by mini-css-extract-plugin\nexport default {\"myPosts\":\"MyPosts_myPosts__M35MQ\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__l2YZH\"};","import s from \"./Post.module.css\";\r\nimport React from \"react\";\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    count: number\r\n}\r\n\r\nexport const Post: React.FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src={'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQAbQvowIqss8KDb8fH2YcQ2JLKdwQBI16CcQ&usqp=CAU'} alt='avatar'/>\r\n            {props.message}\r\n            <div>{props.count}like</div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {mapDispatchToPropsType, mapStateToPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLength10, required} from \"../../../utils/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nexport type postFormDataType = {\r\n    post: string\r\n}\r\n\r\ntype MyPostsPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nexport function MyPosts(props: MyPostsPropsType) {\r\n\r\n    let postsElements = props.posts.map(p => <Post key={p.id} message={p.message} count={p.likesCount}/>)\r\n\r\n    const addPost = (newPost: postFormDataType) => {\r\n        props.addPost(newPost.post)\r\n    }\r\n    return (\r\n        <div className={s.myPosts}>\r\n            <MyPostsReduxForm onSubmit={addPost}/>\r\n            {postsElements}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nlet MyPostsForm = (props: InjectedFormProps<postFormDataType>) => {\r\n    const { pristine, submitting, handleSubmit } = props\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name=\"post\"\r\n                    component={Textarea}\r\n                    type=\"text\"\r\n                    validate={[required, maxLength10]}\r\n                    placeholder='Post Message'\r\n                />\r\n            </div>\r\n            <button type=\"submit\" disabled={pristine || submitting}>AddPost</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst MyPostsReduxForm = reduxForm<postFormDataType>({\r\n    form: 'post'\r\n})(MyPostsForm)","import React from \"react\";\r\nimport {\r\n    actions, PostType,\r\n} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\nexport type mapDispatchToPropsType = {\r\n    addPost: (newPost: string) => void\r\n}\r\n\r\nexport type mapStateToPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profileState.posts,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPost) => {\r\n            dispatch(actions.addPostAC(newPost))\r\n        },\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileContainerType} from \"./ProfileContainer\";\r\n\r\ntype ProfilePropsType = ProfileContainerType & {owner: boolean}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n\r\n        <div className={s.content}>\r\n            <ProfileInfo\r\n                owner={props.owner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                savePhotos={props.savePhotos}\r\n                saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getProfile, getUserStatus, savePhotos, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {RouteComponentProps} from \"react-router\";\r\nimport {withAuthRedirect} from \"../../hok/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\nexport type ProfileContainerType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype WithRouterType = RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<mapStateToPropsType & mapDispatchToPropsType & WithRouterType>  {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n        }\r\n        this.props.getProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        // debugger\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps: Readonly<mapStateToPropsType & mapDispatchToPropsType & WithRouterType>, prevState: Readonly<{}>, snapshot?: any) {\r\n\r\n        if (prevProps.match.params.userId !== this.props.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <Profile\r\n                    {...this.props}\r\n                    owner={! this.props.match.params.userId}\r\n                    status={this.props.status}\r\n                    profile={this.props.profile}\r\n                    updateStatus={this.props.updateStatus}\r\n                    saveProfile={this.props.saveProfile}\r\n                />\r\n        )\r\n    }\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getProfile: (userId: number | null) => void\r\n    getUserStatus: (userId: number | null) => void\r\n    updateStatus: (status: string) => void\r\n    savePhotos: (photoFile: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<string>\r\n}\r\ntype mapStateToPropsType = {\r\n    profile: ProfileType | undefined | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        profile: state.profileState.profile,\r\n        status: state.profileState.status,\r\n        authorizedUserId: state.auth.userId\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n                    withAuthRedirect,\r\n                    withRouter,\r\n                    connect(mapStateToProps,\r\n                        {getProfile, getUserStatus, updateStatus, savePhotos, saveProfile})\r\n                )(ProfileContainer)","import s from './FormsControls.module.css'\r\nimport React from \"react\"\r\nimport {Field} from \"redux-form\"\r\nimport {WrappedFieldProps} from \"redux-form/lib/Field\"\r\n\r\n\r\ntype OwnPropsType = {elementType: string}\r\n// interface FormControlPropsType extends WrappedFieldProps {\r\n//     elementType: string\r\n// }\r\n\r\ntype FormControlPropsType = WrappedFieldProps & OwnPropsType\r\n\r\nconst FormControl: React.FC<FormControlPropsType> =\r\n    ({elementType, input, meta: {touched, error}, ...restProps}) => {\r\n    const element = React.createElement(elementType, {...input, ...restProps})\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {element}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n// WrappedFieldProps\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => <FormControl elementType={'textarea'} {...props} />\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => <FormControl elementType={'input'} {...props} />\r\n\r\nexport function createField<KeysType extends string>(placeholder: string | null,\r\n                            name: KeysType,\r\n                            validators: Array<(values: string) => string | undefined> | [],\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            props: any = {},\r\n                            text = '')  {\r\n    return <div>\r\n        {/*<label htmlFor={name}>{name}</label>*/}\r\n        <Field\r\n            placeholder={placeholder}\r\n            name={name}\r\n            validate={validators}\r\n            component={component}\r\n            {...props}\r\n        />{text}\r\n    </div>\r\n}\r\n\r\n// Argument of type '(props: FormControlPropsType) => JSX.Element' is not assignable to parameter of type 'string | ComponentType<{}> | FC<{}>'.\r\n// Type '(props: FormControlPropsType) => JSX.Element' is not assignable to type 'FunctionComponent<{}>'.\r\n// Types of parameters 'props' and 'props' are incompatible.\r\n// Type '{ children?: ReactNode; }' is missing the following properties from type 'FormControlPropsType': input, meta, props","import React, {Component, ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {  // <T> - тип принимаемого компонента\r\n\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to = \"/login\" />\r\n\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\n\r\n\r\n","\r\nexport const required = (values: string) => {\r\n    if (values) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreators = (max: number) => (values: string) => {\r\n    if (values && values.length > max) return `Max length ${max} symbols`\r\n    return undefined\r\n}\r\n\r\nexport const maxLength10 = maxLengthCreators(10)","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__9dO81\",\"error\":\"FormsControls_error__6ogPg\",\"formSummaryError\":\"FormsControls_formSummaryError__WMr+S\"};","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["props","useState","editeMode","setEditeMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","value","onChange","e","currentTarget","reduxForm","form","pristine","submitting","reset","handleSubmit","profile","initialValues","onSubmit","type","className","s","createField","Input","Object","keys","contacts","map","key","error","ProfileData","owner","goToEditeMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","savePhotos","saveProfile","Preloader","alt","src","photos","large","userPhoto","target","files","length","formData","then","Post","message","count","MyPostsReduxForm","Field","name","component","Textarea","validate","required","maxLength10","placeholder","disabled","MyPostsContainer","connect","state","posts","profileState","dispatch","addPost","newPost","actions","postsElements","p","likesCount","id","post","ProfileContainer","userId","this","match","params","authorizedUserId","getProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","React","compose","withAuthRedirect","withRouter","auth","FormControl","elementType","input","meta","touched","restProps","element","hasError","validators","text","mapStateToProps","isAuth","Component","to","values","maxLengthCreators","max","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}