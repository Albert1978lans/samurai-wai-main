{"version":3,"file":"static/js/944.53cd56b4.chunk.js","mappings":"+MAmEMA,GAAiBC,EAAAA,EAAAA,GAA2C,CAC9DC,KAAM,SADaD,EArBP,SAACE,GACb,IAAQC,EAAyDD,EAAzDC,SAAUC,EAA+CF,EAA/CE,WAAYC,EAAmCH,EAAnCG,MAAOC,EAA4BJ,EAA5BI,aAAcC,EAAcL,EAAdK,WAEnD,OACI,kBAAMC,SAAUF,EAAhB,WAEKG,EAAAA,EAAAA,IAA8B,QAAS,QAAS,CAACC,EAAAA,IAAWC,EAAAA,GAAO,CAACC,KAAM,UAC1EH,EAAAA,EAAAA,IAA8B,WAAY,WAAa,CAACC,EAAAA,IAAWC,EAAAA,GAAO,CAACC,KAAM,cACjFH,EAAAA,EAAAA,IAA+B,KAAM,aAAe,GAAIE,EAAAA,GAAO,CAACC,KAAM,YAAa,cACnFV,EAAMW,QAAS,gBAAKC,UAAWC,EAAAA,EAAAA,iBAAhB,SAAqCb,EAAMW,QAC1DN,IAAc,gBAAKS,IAAI,UAAUC,IAAKV,IACtCA,IAAcE,EAAAA,EAAAA,IAA8B,UAAW,UAAW,CAACC,EAAAA,IAAWC,EAAAA,GAAO,CAACC,KAAM,UAC7F,mBAAQA,KAAK,SAASM,SAAUf,GAAYC,EAA5C,qBACA,mBAAQQ,KAAK,SAASM,SAAUf,GAAYC,EAAYe,QAASd,EAAjE,gCA4BZ,WAAee,EAAAA,EAAAA,KAPS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OACnBf,WAAYc,EAAME,KAAKhB,cAIS,CAACiB,QAAAA,EAAAA,IAAzC,EA9Dc,SAACtB,GAOX,OAAIA,EAAMoB,QACC,SAAC,KAAD,CAAUG,GAAG,cAIpB,4BACI,mCACA,SAAC1B,EAAD,CAAgBS,SAZP,SAACkB,GAEdxB,EAAMsB,QAAQE,IAU0BnB,WAAYL,EAAMK,oB,sMC1B5DoB,EACF,SAAC,GAAgE,IAA/DC,EAA8D,EAA9DA,YAAaC,EAAiD,EAAjDA,MAAiD,IAA1CC,KAAOC,EAAmC,EAAnCA,QAASlB,EAA0B,EAA1BA,MAAWmB,GAAe,YAC1DC,EAAUC,EAAAA,cAAoBN,GAApB,kBAAqCC,GAAUG,IACzDG,EAAWJ,GAAWlB,EAC5B,OACI,iBAAKC,UAAWC,EAAAA,EAAAA,YAAgB,KAAOoB,EAAWpB,EAAAA,EAAAA,MAAU,IAA5D,WACI,yBACKkB,IAEJE,IAAY,0BAAOtB,QAKnBuB,EAAwC,SAAClC,GAAD,OAAW,SAACyB,GAAD,QAAaC,YAAa,YAAgB1B,KAE7FS,EAAqC,SAACT,GAAD,OAAW,SAACyB,GAAD,QAAaC,YAAa,SAAa1B,KAE7F,SAASO,EAAqC4B,EACzBC,EACAC,EACAC,GAEa,IADbtC,EACY,uDADC,GACbuC,EAAY,uDAAL,GAC/B,OAAO,4BAEH,SAAC,KAAD,QACIJ,YAAaA,EACbC,KAAMA,EACNI,SAAUH,EACVC,UAAWA,GACPtC,IACLuC,O,sGC5CJ,IAAM/B,EAAW,SAACiC,GACrB,IAAIA,EACJ,MAAO,qBAGEC,EAAoB,SAACC,GAAD,OAAiB,SAACF,GAC/C,GAAIA,GAAUA,EAAOG,OAASD,EAAK,MAAM,cAAN,OAAqBA,EAArB,cAI1BE,EAAcH,EAAkB,K,mBCV7C,KAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB","sources":["components/Login/Login.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {loginTC} from \"../../redux/auth-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators\";\r\nimport s from '../common/FormsControls/FormsControls.module.css'\r\n\r\nexport type formDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\ntype FormDataTypeKeys = keyof formDataType\r\n\r\ntype formDataPropsType = {\r\n    captchaUrl: string | null\r\n}\r\n\r\ntype LoginPropsType = mapDispatchToPropsType & mapStateToPropsType\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n\r\n    const onSubmit = (formData: formDataType) => {\r\n        // console.log(formData)\r\n        props.loginTC(formData)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to='/profile'/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nlet LoginForm = (props: InjectedFormProps<formDataType, formDataPropsType> & formDataPropsType) => {\r\n    const { pristine, submitting, reset, handleSubmit, captchaUrl} = props\r\n    // debugger\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            {createField<FormDataTypeKeys>('Email', 'email', [required], Input, {type: 'text'})}\r\n            {createField<FormDataTypeKeys>('Password', 'password',  [required], Input, {type: 'password'})}\r\n            {createField<FormDataTypeKeys>( null, 'rememberMe',  [], Input, {type: 'checkbox'}, 'rememberMe')}\r\n            {props.error && <div className={s.formSummaryError}>{props.error}</div>}\r\n            {captchaUrl && <img alt='captcha' src={captchaUrl}/> }\r\n            {captchaUrl && createField<FormDataTypeKeys>('Captcha', 'captcha', [required], Input, {type: 'text'})}\r\n            <button type=\"submit\" disabled={pristine || submitting}>Submit</button>\r\n            <button type=\"button\" disabled={pristine || submitting} onClick={reset}>\r\n                Clear Values\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst LoginReduxForm = reduxForm<formDataType, formDataPropsType>({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\ntype mapDispatchToPropsType = {\r\n    loginTC: (data: formDataType) => void\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captchaUrl: state.auth.captchaUrl\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {loginTC})(Login)","import s from './FormsControls.module.css'\r\nimport React from \"react\"\r\nimport {Field} from \"redux-form\"\r\nimport {WrappedFieldProps} from \"redux-form/lib/Field\"\r\n\r\n\r\ntype OwnPropsType = {elementType: string}\r\n// interface FormControlPropsType extends WrappedFieldProps {\r\n//     elementType: string\r\n// }\r\n\r\ntype FormControlPropsType = WrappedFieldProps & OwnPropsType\r\n\r\nconst FormControl: React.FC<FormControlPropsType> =\r\n    ({elementType, input, meta: {touched, error}, ...restProps}) => {\r\n    const element = React.createElement(elementType, {...input, ...restProps})\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {element}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n// WrappedFieldProps\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => <FormControl elementType={'textarea'} {...props} />\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => <FormControl elementType={'input'} {...props} />\r\n\r\nexport function createField<KeysType extends string>(placeholder: string | null,\r\n                            name: KeysType,\r\n                            validators: Array<(values: string) => string | undefined> | [],\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            props: any = {},\r\n                            text = '')  {\r\n    return <div>\r\n        {/*<label htmlFor={name}>{name}</label>*/}\r\n        <Field\r\n            placeholder={placeholder}\r\n            name={name}\r\n            validate={validators}\r\n            component={component}\r\n            {...props}\r\n        />{text}\r\n    </div>\r\n}\r\n\r\n// Argument of type '(props: FormControlPropsType) => JSX.Element' is not assignable to parameter of type 'string | ComponentType<{}> | FC<{}>'.\r\n// Type '(props: FormControlPropsType) => JSX.Element' is not assignable to type 'FunctionComponent<{}>'.\r\n// Types of parameters 'props' and 'props' are incompatible.\r\n// Type '{ children?: ReactNode; }' is missing the following properties from type 'FormControlPropsType': input, meta, props","\r\nexport const required = (values: string) => {\r\n    if (values) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreators = (max: number) => (values: string) => {\r\n    if (values && values.length > max) return `Max length ${max} symbols`\r\n    return undefined\r\n}\r\n\r\nexport const maxLength10 = maxLengthCreators(10)","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__9dO81\",\"error\":\"FormsControls_error__6ogPg\",\"formSummaryError\":\"FormsControls_formSummaryError__WMr+S\"};"],"names":["LoginReduxForm","reduxForm","form","props","pristine","submitting","reset","handleSubmit","captchaUrl","onSubmit","createField","required","Input","type","error","className","s","alt","src","disabled","onClick","connect","state","isAuth","auth","loginTC","to","formData","FormControl","elementType","input","meta","touched","restProps","element","React","hasError","Textarea","placeholder","name","validators","component","text","validate","values","maxLengthCreators","max","length","maxLength10"],"sourceRoot":""}