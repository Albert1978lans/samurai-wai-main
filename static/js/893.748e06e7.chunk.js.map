{"version":3,"file":"static/js/893.748e06e7.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/MessageItem/MessageItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/common/FormsControls/FormsControls.tsx","hok/withAuthRedirect.tsx","utils/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__0jBz9\",\"dialogsItems\":\"Dialogs_dialogsItems__P+qdG\",\"dialog\":\"Dialogs_dialog__hNFDs\",\"activeLink\":\"Dialogs_activeLink__eWPYD\",\"messages\":\"Dialogs_messages__3BmJr\",\"messagesItem\":\"Dialogs_messagesItem__As2ZH\"};","import React from \"react\";\r\nimport s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogItemType} from \"../../../redux/store\";\r\n\r\ntype DialogItemTypePropsType = DialogItemType\r\n\r\nexport const DialogItem: React.FC<DialogItemTypePropsType> = (props) => {\r\n    let patch = '/dialogs/' + props.id\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink\r\n                key={props.id}\r\n                to={patch}\r\n                activeClassName={s.activeLink}>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}","import s from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\nimport {MessageItemType} from \"../../../redux/store\";\r\n\r\ntype MessageItemPropsType = MessageItemType\r\n\r\nexport const MessageItem: React.FC<MessageItemPropsType> = (props) => {\r\n    return <div key={props.id} className={s.messagesItem}>{props.message}</div>\r\n}","import s from './Dialogs.module.css'\r\nimport React from \"react\";\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {MessageItem} from \"./MessageItem/MessageItem\";\r\nimport {initialStateType} from \"../../redux/dialogs-reducer\";\r\nimport {mapDispatchToPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreators, required} from \"../../utils/validators\";\r\n\r\ntype DialogsPropsType = initialStateType & mapDispatchToPropsType\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n    let dialogsElements = props.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n    let messagesElements = props.messages.map(m => <MessageItem key={m.id} message={m.message} id={m.id}/>)\r\n\r\n    const sandMessage =(data: messageFormDataType) => {\r\n        props.sendMessage(data.newDialogsMessage)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <div>\r\n                    {messagesElements}\r\n                </div>\r\n                <DialogsMessageReduxForm onSubmit={sandMessage}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type messageFormDataType = {\r\n    newDialogsMessage: string\r\n}\r\n\r\nconst maxLength30 = maxLengthCreators(30)\r\n\r\nlet DialogsMessage = (props: InjectedFormProps<messageFormDataType>) => {\r\n    const { pristine, submitting, handleSubmit } = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name=\"newDialogsMessage\"\r\n                    component={Textarea}\r\n                    type=\"text\"\r\n                    placeholder='Enter your message'\r\n                    validate={[required, maxLength30]}\r\n                />\r\n            </div>\r\n            <button type=\"submit\" disabled={pristine || submitting}>Sand</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst DialogsMessageReduxForm = reduxForm<messageFormDataType>({\r\n    form: 'post'\r\n})(DialogsMessage)","\r\nimport React from \"react\";\r\nimport {actions, initialStateType,} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hok/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nexport type mapDispatchToPropsType = {\r\n    sendMessage: (newMessage: string) => void\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): initialStateType => {\r\n    return {\r\n        dialogs: state.dialogsState.dialogs,\r\n        messages: state.dialogsState.messages\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessage) => {\r\n            dispatch(actions.addMessageAC(newMessage))\r\n        }\r\n}}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs)\r\n\r\n","import s from './FormsControls.module.css'\r\nimport React from \"react\"\r\nimport {Field} from \"redux-form\"\r\nimport {WrappedFieldProps} from \"redux-form/lib/Field\"\r\n\r\n\r\ntype OwnPropsType = {elementType: string}\r\n// interface FormControlPropsType extends WrappedFieldProps {\r\n//     elementType: string\r\n// }\r\n\r\ntype FormControlPropsType = WrappedFieldProps & OwnPropsType\r\n\r\nconst FormControl: React.FC<FormControlPropsType> =\r\n    ({elementType, input, meta: {touched, error}, ...restProps}) => {\r\n    const element = React.createElement(elementType, {...input, ...restProps})\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {element}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n// WrappedFieldProps\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => <FormControl elementType={'textarea'} {...props} />\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => <FormControl elementType={'input'} {...props} />\r\n\r\nexport function createField<KeysType extends string>(placeholder: string | null,\r\n                            name: KeysType,\r\n                            validators: Array<(values: string) => string | undefined> | [],\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            props: any = {},\r\n                            text = '')  {\r\n    return <div>\r\n        {/*<label htmlFor={name}>{name}</label>*/}\r\n        <Field\r\n            placeholder={placeholder}\r\n            name={name}\r\n            validate={validators}\r\n            component={component}\r\n            {...props}\r\n        />{text}\r\n    </div>\r\n}\r\n\r\n// Argument of type '(props: FormControlPropsType) => JSX.Element' is not assignable to parameter of type 'string | ComponentType<{}> | FC<{}>'.\r\n// Type '(props: FormControlPropsType) => JSX.Element' is not assignable to type 'FunctionComponent<{}>'.\r\n// Types of parameters 'props' and 'props' are incompatible.\r\n// Type '{ children?: ReactNode; }' is missing the following properties from type 'FormControlPropsType': input, meta, props","import React, {Component, ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {  // <T> - тип принимаемого компонента\r\n\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to = \"/login\" />\r\n\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\n\r\n\r\n","\r\nexport const required = (values: string) => {\r\n    if (values) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreators = (max: number) => (values: string) => {\r\n    if (values && values.length > max) return `Max length ${max} symbols`\r\n    return undefined\r\n}\r\n\r\nexport const maxLength10 = maxLengthCreators(10)","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__9dO81\",\"error\":\"FormsControls_error__6ogPg\",\"formSummaryError\":\"FormsControls_formSummaryError__WMr+S\"};"],"names":["DialogItem","props","patch","id","className","s","to","activeClassName","name","MessageItem","message","maxLength30","maxLengthCreators","DialogsMessageReduxForm","reduxForm","form","pristine","submitting","handleSubmit","onSubmit","Field","component","Textarea","type","placeholder","validate","required","disabled","compose","withAuthRedirect","connect","state","dialogs","dialogsState","messages","dispatch","sendMessage","newMessage","actions","dialogsElements","map","d","messagesElements","m","data","newDialogsMessage","FormControl","elementType","input","meta","touched","error","restProps","element","React","hasError","Input","createField","validators","text","mapStateToProps","isAuth","auth","Component","values","max","length","maxLength10"],"sourceRoot":""}