{"version":3,"file":"static/js/532.00054aef.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo.module.css?2acc","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormsControls/FormsControls.tsx","hok/withAuthRedirect.tsx","utils/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ProfileInfo_content__bcDRP\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ProfileInfo_content__tndGp\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__d3Qu4\",\"img\":\"ProfileInfo_img__jvaBP\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    const [editeMode, setEditeMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditeMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditeMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {!editeMode &&\r\n                    <span onDoubleClick={activateEditMode}>{props.status || '--hooks--'}</span>}\r\n            </div>\r\n            <div>\r\n                {editeMode &&\r\n                    <input\r\n                        autoFocus\r\n                        onBlur={deactivateEditMode}\r\n                        value={status}\r\n                        onChange={onChangeInput}\r\n                    />}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../ProfileContainer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}:ProfileInfoType) => {\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.img}>\r\n                    <img alt={'userPhoto'} src={profile.photos.small} />\r\n                </div>\r\n\r\n                <ProfileStatusWithHooks\r\n                    status={status}\r\n                    updateStatus={updateStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","// extracted by mini-css-extract-plugin\nexport default {\"myPosts\":\"MyPosts_myPosts__M35MQ\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__l2YZH\"};","import s from \"./Post.module.css\";\r\nimport React from \"react\";\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    count: number\r\n}\r\n\r\nexport const Post: React.FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src={'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQAbQvowIqss8KDb8fH2YcQ2JLKdwQBI16CcQ&usqp=CAU'} alt='avatar'/>\r\n            {props.message}\r\n            <div>{props.count}like</div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {mapDispatchToPropsType, mapStateToPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLength10, required} from \"../../../utils/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nexport type postFormDataType = {\r\n    post: string\r\n}\r\n\r\ntype MyPostsPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nexport function MyPosts(props: MyPostsPropsType) {\r\n\r\n    let postsElements = props.posts.map(p => <Post key={p.id} message={p.message} count={p.likesCount}/>)\r\n\r\n    const addPost = (newPost: postFormDataType) => {\r\n        props.addPost(newPost.post)\r\n    }\r\n    return (\r\n        <div className={s.myPosts}>\r\n            <MyPostsReduxForm onSubmit={addPost}/>\r\n            {postsElements}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nlet MyPostsForm = (props: InjectedFormProps<postFormDataType>) => {\r\n    const { pristine, submitting, handleSubmit } = props\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name=\"post\"\r\n                    component={Textarea}\r\n                    type=\"text\"\r\n                    validate={[required, maxLength10]}\r\n                    placeholder='Post Message'\r\n                />\r\n            </div>\r\n            <button type=\"submit\" disabled={pristine || submitting}>AddPost</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst MyPostsReduxForm = reduxForm<postFormDataType>({\r\n    form: 'post'\r\n})(MyPostsForm)","import React from \"react\";\r\nimport {\r\n    addPostAC, PostType,\r\n} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\nexport type mapDispatchToPropsType = {\r\n    addPost: (newPost: string) => void\r\n}\r\n\r\nexport type mapStateToPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profileState.posts,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPost) => {\r\n            dispatch(addPostAC(newPost))\r\n        },\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileContainerType} from \"./ProfileContainer\";\r\n\r\ntype ProfilePropsType = ProfileContainerType\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n\r\n        <div className={s.content}>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getProfile, getUserStatus, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {RouteComponentProps} from \"react-router\";\r\nimport {withAuthRedirect} from \"../../hok/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nexport type ProfileContainerType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nexport type ProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: object\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype WithRouterType = RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<mapStateToPropsType & mapDispatchToPropsType & WithRouterType>  {\r\n\r\n    componentDidMount() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n        }\r\n\r\n        this.props.getProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <Profile\r\n                    {...this.props}\r\n                    status={this.props.status}\r\n                    profile={this.props.profile}\r\n                    updateStatus={this.props.updateStatus}\r\n                />\r\n        )\r\n    }\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getProfile: (userId: number | null) => void\r\n    getUserStatus: (userId: number | null) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype mapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: number | null\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        profile: state.profileState.profile,\r\n        status: state.profileState.status,\r\n        authorizedUserId: state.auth.userId\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n                    withAuthRedirect,\r\n                    withRouter,\r\n                    connect(mapStateToProps, {getProfile, getUserStatus, updateStatus})\r\n                )(ProfileContainer)","import s from './FormsControls.module.css'\r\nimport React from \"react\";\r\nimport {Field} from \"redux-form\";\r\n\r\n\r\n// export const Textarea = ({input, meta, ...props}: any) => {\r\n//     const hasError = meta.touched && meta.error\r\n//     return (\r\n//         <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n//             <div>\r\n//                 <textarea {...input} {...props}/>\r\n//             </div>\r\n//             {hasError && <span>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// export const Input = ({input, meta, ...props}: any) => {\r\n//     const hasError = meta.touched && meta.error\r\n//     return (\r\n//         <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n//             <div>\r\n//                 <input {...input} {...props}/>\r\n//             </div>\r\n//             {hasError && <span>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// const FormControl = (props: any) => {\r\n//     const hasError = props.meta.touched && props.meta.error\r\n//     return (\r\n//         <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n//             {props.children}\r\n//             <div>\r\n//                 {hasError && <span>{props.meta.error}</span>}\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// export const Textarea2 = (props: any) => {\r\n//     return <FormControl {...props}><textarea {...props.input} {...props}/></FormControl>\r\n// }\r\n// export const Input2 = (props: any) => {\r\n//     return <FormControl {...props}><input {...props.input} {...props}/></FormControl>\r\n// }\r\n//\r\n// const Element = (Element: any) => ({ input, meta, ...props }: any) => {\r\n//     const hasError = meta.touched && meta.error;\r\n//     return (\r\n//         <div className={ s.formControl + \" \" + (hasError ? s.error : \"\") }>\r\n//             <div><Element {...input} {...props} /></div>\r\n//             <div>{ hasError && <span> { meta.error } </span> }</div>\r\n//         </div>\r\n//     );\r\n// };\r\n// export const Textarea3 = Element(\"textarea\")\r\n// export const Input3 = Element(\"input\")\r\n//\r\n//\r\n//\r\nconst FormControl1 = ({input, meta: {touched, error}, elementType, ...props}: any) => {\r\n    const element = React.createElement(elementType, {...input, ...props})\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {element}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => <FormControl1 elementType={'textarea'} {...props} />\r\n\r\nexport const Input = (props: any) => <FormControl1 elementType={'input'} {...props} />\r\n\r\nexport const createField = (placeholder: string | null,\r\n                            name: string,\r\n                            validators: Array<(values: string) => string | undefined> | [],\r\n                            component: React.ComponentType,\r\n                            props: any = {},\r\n                            text = '') => {\r\n    return <div>\r\n        <label htmlFor={name}>{name}</label>\r\n        <Field\r\n            placeholder={placeholder}\r\n            name={name}\r\n            validate={validators}\r\n            component={component}\r\n            {...props}\r\n        />{text}\r\n    </div>\r\n}\r\n\r\n","import React, {Component, ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {  // <T> - тип принимаемого компонента\r\n\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to = \"/login\" />\r\n\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\n\r\n\r\n","\r\nexport const required = (values: string) => {\r\n    if (values) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreators = (max: number) => (values: string) => {\r\n    if (values && values.length > max) return `Max length ${max} symbols`\r\n    return undefined\r\n}\r\n\r\nexport const maxLength10 = maxLengthCreators(10)","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__9dO81\",\"error\":\"FormsControls_error__6ogPg\",\"formSummaryError\":\"FormsControls_formSummaryError__WMr+S\"};","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["props","useState","editeMode","setEditeMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","value","onChange","e","currentTarget","profile","className","s","alt","src","photos","small","Preloader","Post","message","count","MyPostsReduxForm","reduxForm","form","pristine","submitting","handleSubmit","onSubmit","Field","name","component","Textarea","type","validate","required","maxLength10","placeholder","disabled","MyPostsContainer","connect","state","posts","profileState","dispatch","addPost","newPost","addPostAC","postsElements","map","p","likesCount","id","post","ProfileContainer","userId","this","match","params","authorizedUserId","getProfile","getUserStatus","React","compose","withAuthRedirect","withRouter","auth","FormControl1","input","meta","touched","error","elementType","element","hasError","Input","createField","validators","text","htmlFor","mapStateToProps","isAuth","Component","restProps","to","values","maxLengthCreators","max","length","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}