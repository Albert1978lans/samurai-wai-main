{"version":3,"file":"static/js/893.c80b2046.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/MessageItem/MessageItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/common/FormsControls/FormsControls.tsx","hok/withAuthRedirect.tsx","utils/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__0jBz9\",\"dialogsItems\":\"Dialogs_dialogsItems__P+qdG\",\"dialog\":\"Dialogs_dialog__hNFDs\",\"activeLink\":\"Dialogs_activeLink__eWPYD\",\"messages\":\"Dialogs_messages__3BmJr\",\"messagesItem\":\"Dialogs_messagesItem__As2ZH\"};","import React from \"react\";\r\nimport s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogItemType} from \"../../../redux/store\";\r\n\r\ntype DialogItemTypePropsType = DialogItemType\r\n\r\nexport const DialogItem: React.FC<DialogItemTypePropsType> = (props) => {\r\n    let patch = '/dialogs/' + props.id\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink\r\n                key={props.id}\r\n                to={patch}\r\n                activeClassName={s.activeLink}>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}","import s from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\nimport {MessageItemType} from \"../../../redux/store\";\r\n\r\ntype MessageItemPropsType = MessageItemType\r\n\r\nexport const MessageItem: React.FC<MessageItemPropsType> = (props) => {\r\n    return <div key={props.id} className={s.messagesItem}>{props.message}</div>\r\n}","import s from './Dialogs.module.css'\r\nimport React from \"react\";\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {MessageItem} from \"./MessageItem/MessageItem\";\r\nimport {initialStateType} from \"../../redux/dialogs-reducer\";\r\nimport {mapDispatchToPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreators, required} from \"../../utils/validators\";\r\n\r\ntype DialogsPropsType = initialStateType & mapDispatchToPropsType\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n    let dialogsElements = props.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n    let messagesElements = props.messages.map(m => <MessageItem key={m.id} message={m.message} id={m.id}/>)\r\n\r\n    const sandMessage =(data: messageFormDataType) => {\r\n        props.sendMessage(data.newDialogsMessage)\r\n    }\r\n    console.log('render DIALOGS')\r\n    return (\r\n        <div className={s.dialogs}>\r\n\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <div>\r\n                    {messagesElements}\r\n                </div>\r\n                <DialogsMessageReduxForm onSubmit={sandMessage}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type messageFormDataType = {\r\n    newDialogsMessage: string\r\n}\r\n\r\nconst maxLength30 = maxLengthCreators(30)\r\n\r\nlet DialogsMessage = (props: InjectedFormProps<messageFormDataType>) => {\r\n    const { pristine, submitting, handleSubmit } = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name=\"newDialogsMessage\"\r\n                    component={Textarea}\r\n                    type=\"text\"\r\n                    placeholder='Enter your message'\r\n                    validate={[required, maxLength30]}\r\n                />\r\n            </div>\r\n            <button type=\"submit\" disabled={pristine || submitting}>Sand</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst DialogsMessageReduxForm = reduxForm<messageFormDataType>({\r\n    form: 'post'\r\n})(DialogsMessage)","\r\nimport React from \"react\";\r\nimport {addMessageAC, initialStateType,} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hok/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nexport type mapDispatchToPropsType = {\r\n    sendMessage: (newMessage: string) => void\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): initialStateType => {\r\n    return {\r\n        dialogs: state.dialogsState.dialogs,\r\n        messages: state.dialogsState.messages\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessage) => {\r\n            dispatch(addMessageAC(newMessage))\r\n        }\r\n}}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs)\r\n\r\n","import s from './FormsControls.module.css'\r\nimport React from \"react\";\r\nimport {Field} from \"redux-form\";\r\n\r\n\r\n// export const Textarea = ({input, meta, ...props}: any) => {\r\n//     const hasError = meta.touched && meta.error\r\n//     return (\r\n//         <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n//             <div>\r\n//                 <textarea {...input} {...props}/>\r\n//             </div>\r\n//             {hasError && <span>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// export const Input = ({input, meta, ...props}: any) => {\r\n//     const hasError = meta.touched && meta.error\r\n//     return (\r\n//         <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n//             <div>\r\n//                 <input {...input} {...props}/>\r\n//             </div>\r\n//             {hasError && <span>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// const FormControl = (props: any) => {\r\n//     const hasError = props.meta.touched && props.meta.error\r\n//     return (\r\n//         <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n//             {props.children}\r\n//             <div>\r\n//                 {hasError && <span>{props.meta.error}</span>}\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// export const Textarea2 = (props: any) => {\r\n//     return <FormControl {...props}><textarea {...props.input} {...props}/></FormControl>\r\n// }\r\n// export const Input2 = (props: any) => {\r\n//     return <FormControl {...props}><input {...props.input} {...props}/></FormControl>\r\n// }\r\n//\r\n// const Element = (Element: any) => ({ input, meta, ...props }: any) => {\r\n//     const hasError = meta.touched && meta.error;\r\n//     return (\r\n//         <div className={ s.formControl + \" \" + (hasError ? s.error : \"\") }>\r\n//             <div><Element {...input} {...props} /></div>\r\n//             <div>{ hasError && <span> { meta.error } </span> }</div>\r\n//         </div>\r\n//     );\r\n// };\r\n// export const Textarea3 = Element(\"textarea\")\r\n// export const Input3 = Element(\"input\")\r\n//\r\n//\r\n//\r\nconst FormControl1 = ({input, meta: {touched, error}, elementType, ...props}: any) => {\r\n    const element = React.createElement(elementType, {...input, ...props})\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {element}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => <FormControl1 elementType={'textarea'} {...props} />\r\n\r\nexport const Input = (props: any) => <FormControl1 elementType={'input'} {...props} />\r\n\r\nexport const createField = (placeholder: string | null,\r\n                            name: string,\r\n                            validators: Array<(values: string) => string | undefined> | [],\r\n                            component: React.ComponentType,\r\n                            props: any = {},\r\n                            text = '') => {\r\n    return <div>\r\n        <label htmlFor={name}>{name}</label>\r\n        <Field\r\n            placeholder={placeholder}\r\n            name={name}\r\n            validate={validators}\r\n            component={component}\r\n            {...props}\r\n        />{text}\r\n    </div>\r\n}\r\n\r\n","import React, {Component, ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {  // <T> - тип принимаемого компонента\r\n\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to = \"/login\" />\r\n\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\n\r\n\r\n","\r\nexport const required = (values: string) => {\r\n    if (values) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreators = (max: number) => (values: string) => {\r\n    if (values && values.length > max) return `Max length ${max} symbols`\r\n    return undefined\r\n}\r\n\r\nexport const maxLength10 = maxLengthCreators(10)","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__9dO81\",\"error\":\"FormsControls_error__6ogPg\",\"formSummaryError\":\"FormsControls_formSummaryError__WMr+S\"};"],"names":["DialogItem","props","patch","id","className","s","to","activeClassName","name","MessageItem","message","maxLength30","maxLengthCreators","DialogsMessageReduxForm","reduxForm","form","pristine","submitting","handleSubmit","onSubmit","Field","component","Textarea","type","placeholder","validate","required","disabled","compose","withAuthRedirect","connect","state","dialogs","dialogsState","messages","dispatch","sendMessage","newMessage","addMessageAC","dialogsElements","map","d","messagesElements","m","console","log","data","newDialogsMessage","FormControl1","input","meta","touched","error","elementType","element","React","hasError","Input","createField","validators","text","htmlFor","mapStateToProps","isAuth","auth","Component","restProps","values","max","length","maxLength10"],"sourceRoot":""}