{"version":3,"file":"static/js/944.5e1dac9b.chunk.js","mappings":"8MA0DMA,GAAiBC,EAAAA,EAAAA,GAAwB,CAC3CC,KAAM,SADaD,EAlBP,SAACE,GACb,IAAQC,EAA8CD,EAA9CC,SAAUC,EAAoCF,EAApCE,WAAYC,EAAwBH,EAAxBG,MAAOC,EAAiBJ,EAAjBI,aACrC,OACI,kBAAMC,SAAUD,EAAhB,WAEKE,EAAAA,EAAAA,IAAY,QAAS,QAAS,CAACC,EAAAA,IAAWC,EAAAA,GAAO,CAACC,KAAM,UACxDH,EAAAA,EAAAA,IAAY,WAAY,WAAa,CAACC,EAAAA,IAAWC,EAAAA,GAAO,CAACC,KAAM,cAC/DH,EAAAA,EAAAA,IAAa,KAAM,aAAe,GAAIE,EAAAA,GAAO,CAACC,KAAM,YAAa,cACjET,EAAMU,QAAS,gBAAKC,UAAWC,EAAAA,EAAAA,iBAAhB,SAAqCZ,EAAMU,SAC3D,mBAAQD,KAAK,SAASI,SAAUZ,GAAYC,EAA5C,qBACA,mBAAQO,KAAK,SAASI,SAAUZ,GAAYC,EAAYY,QAASX,EAAjE,gCA0BZ,WAAeY,EAAAA,EAAAA,KANS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,UAIa,CAACE,QAAAA,EAAAA,IAAzC,EAzDc,SAACnB,GAOX,OAAIA,EAAMiB,QACC,SAAC,KAAD,CAAUG,GAAG,cAIpB,4BACI,mCACA,SAACvB,EAAD,CAAgBQ,SAZP,SAACgB,GACdC,QAAQC,IAAIF,GACZrB,EAAMmB,QAAQE,a,sMCuChBG,EAAe,SAAC,GAAiE,IAAhEC,EAA+D,EAA/DA,MAA+D,IAAxDC,KAAOC,EAAiD,EAAjDA,QAASjB,EAAwC,EAAxCA,MAAQkB,EAAgC,EAAhCA,YAAgB5B,GAAgB,YAC5E6B,EAAUC,EAAAA,cAAoBF,GAApB,kBAAqCH,GAAUzB,IACzD+B,EAAWJ,GAAWjB,EAC5B,OACI,iBAAKC,UAAWC,EAAAA,EAAAA,YAAgB,KAAOmB,EAAWnB,EAAAA,EAAAA,MAAU,IAA5D,WACI,yBACKiB,IAEJE,IAAY,0BAAOrB,QAKnBsB,EAAW,SAAChC,GAAD,OAAgB,SAACwB,GAAD,QAAcI,YAAa,YAAgB5B,KAEtEQ,EAAQ,SAACR,GAAD,OAAgB,SAACwB,GAAD,QAAcI,YAAa,SAAa5B,KAEhEM,EAAc,SAAC2B,EACAC,EACAC,EACAC,GAEe,IADfpC,EACc,uDADD,GACbqC,EAAc,uDAAP,GAC/B,OAAO,4BACH,kBAAOC,QAASJ,EAAhB,SAAuBA,KACvB,SAAC,KAAD,QACID,YAAaA,EACbC,KAAMA,EACNK,SAAUJ,EACVC,UAAWA,GACPpC,IACLqC,O,sGC5FJ,IAAM9B,EAAW,SAACiC,GACrB,IAAIA,EACJ,MAAO,qBAGEC,EAAoB,SAACC,GAAD,OAAiB,SAACF,GAC/C,GAAIA,GAAUA,EAAOG,OAASD,EAAK,MAAM,cAAN,OAAqBA,EAArB,cAI1BE,EAAcH,EAAkB,K,mBCV7C,KAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB","sources":["components/Login/Login.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {loginTC} from \"../../redux/auth-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators\";\r\nimport s from '../common/FormsControls/FormsControls.module.css'\r\n\r\nexport type formDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\ntype LoginPropsType = mapDispatchToPropsType & mapStateToPropsType\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n\r\n    const onSubmit = (formData: formDataType) => {\r\n        console.log(formData)\r\n        props.loginTC(formData)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to='/profile'/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nlet LoginForm = (props: InjectedFormProps<formDataType>) => {\r\n    const { pristine, submitting, reset, handleSubmit } = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            {createField('Email', 'email', [required], Input, {type: 'text'})}\r\n            {createField('Password', 'password',  [required], Input, {type: 'password'})}\r\n            {createField( null, 'rememberMe',  [], Input, {type: 'checkbox'}, 'rememberMe')}\r\n            {props.error && <div className={s.formSummaryError}>{props.error}</div>}\r\n            <button type=\"submit\" disabled={pristine || submitting}>Submit</button>\r\n            <button type=\"button\" disabled={pristine || submitting} onClick={reset}>\r\n                Clear Values\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst LoginReduxForm = reduxForm<formDataType>({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\ntype mapDispatchToPropsType = {\r\n    loginTC: (data: formDataType) => void\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {loginTC})(Login)","import s from './FormsControls.module.css'\r\nimport React from \"react\";\r\nimport {Field} from \"redux-form\";\r\n\r\n\r\n// export const Textarea = ({input, meta, ...props}: any) => {\r\n//     const hasError = meta.touched && meta.error\r\n//     return (\r\n//         <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n//             <div>\r\n//                 <textarea {...input} {...props}/>\r\n//             </div>\r\n//             {hasError && <span>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// export const Input = ({input, meta, ...props}: any) => {\r\n//     const hasError = meta.touched && meta.error\r\n//     return (\r\n//         <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n//             <div>\r\n//                 <input {...input} {...props}/>\r\n//             </div>\r\n//             {hasError && <span>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// const FormControl = (props: any) => {\r\n//     const hasError = props.meta.touched && props.meta.error\r\n//     return (\r\n//         <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n//             {props.children}\r\n//             <div>\r\n//                 {hasError && <span>{props.meta.error}</span>}\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// export const Textarea2 = (props: any) => {\r\n//     return <FormControl {...props}><textarea {...props.input} {...props}/></FormControl>\r\n// }\r\n// export const Input2 = (props: any) => {\r\n//     return <FormControl {...props}><input {...props.input} {...props}/></FormControl>\r\n// }\r\n//\r\n// const Element = (Element: any) => ({ input, meta, ...props }: any) => {\r\n//     const hasError = meta.touched && meta.error;\r\n//     return (\r\n//         <div className={ s.formControl + \" \" + (hasError ? s.error : \"\") }>\r\n//             <div><Element {...input} {...props} /></div>\r\n//             <div>{ hasError && <span> { meta.error } </span> }</div>\r\n//         </div>\r\n//     );\r\n// };\r\n// export const Textarea3 = Element(\"textarea\")\r\n// export const Input3 = Element(\"input\")\r\n//\r\n//\r\n//\r\nconst FormControl1 = ({input, meta: {touched, error}, elementType, ...props}: any) => {\r\n    const element = React.createElement(elementType, {...input, ...props})\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {element}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => <FormControl1 elementType={'textarea'} {...props} />\r\n\r\nexport const Input = (props: any) => <FormControl1 elementType={'input'} {...props} />\r\n\r\nexport const createField = (placeholder: string | null,\r\n                            name: string,\r\n                            validators: Array<(values: string) => string | undefined> | [],\r\n                            component: React.ComponentType,\r\n                            props: any = {},\r\n                            text = '') => {\r\n    return <div>\r\n        <label htmlFor={name}>{name}</label>\r\n        <Field\r\n            placeholder={placeholder}\r\n            name={name}\r\n            validate={validators}\r\n            component={component}\r\n            {...props}\r\n        />{text}\r\n    </div>\r\n}\r\n\r\n","\r\nexport const required = (values: string) => {\r\n    if (values) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreators = (max: number) => (values: string) => {\r\n    if (values && values.length > max) return `Max length ${max} symbols`\r\n    return undefined\r\n}\r\n\r\nexport const maxLength10 = maxLengthCreators(10)","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__9dO81\",\"error\":\"FormsControls_error__6ogPg\",\"formSummaryError\":\"FormsControls_formSummaryError__WMr+S\"};"],"names":["LoginReduxForm","reduxForm","form","props","pristine","submitting","reset","handleSubmit","onSubmit","createField","required","Input","type","error","className","s","disabled","onClick","connect","state","isAuth","auth","loginTC","to","formData","console","log","FormControl1","input","meta","touched","elementType","element","React","hasError","Textarea","placeholder","name","validators","component","text","htmlFor","validate","values","maxLengthCreators","max","length","maxLength10"],"sourceRoot":""}